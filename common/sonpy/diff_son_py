1a2,3
> import numpy
> 	
3,34c5
< def get_sample_interval(chan, unit='microseconds'):
<     """
<     Returns the sampling interval on a waveform data channel, i.e.,
<     the reciprocal of the sampling rate for that channel.
< 
<     Based on SONGetSampleInterval.m from the Matlab SON library which
<     is part of sigTOOL by Dr. Malcolm Lidierth:
<     http://sigtool.sourceforge.net/
<     http://www.kcl.ac.uk/schools/biohealth/depts/physiology/mlidierth.html
<     """
<     if chan.info.kind not in [1,6,7,9]:
<         raise ValueError("Invalid channel type")
<     if chan.fhead.system_id in [1,2,3,4,5]: # Before version 5
<         sample_interval = (chan.info.divide*chan.fhead.us_per_time*
<                            chan.fhead.time_per_adc)
<     else: # version 6 and above
<         sample_interval = (chan.info.l_chan_dvd*chan.fhead.us_per_time*
<                            1e6*chan.fhead.dtime_base)
<     
<     if unit=='microseconds':
<         return sample_interval
<     elif unit=='milliseconds':
<         return sample_interval*1e-3
<     elif unit=='seconds':
<         return sample_interval*1e-6
<     else:
<         raise ValueError(
<             "Invalid unit: "+str(unit)+
<             "\n Must be 'microseconds', 'milliseconds', or 'seconds'")
<     
< 
< def _get_block_headers(fhead, chan_info):
---
> def _get_block_headers(fhead, chanInfo):
36,39c7,8
<     Returns a matrix containing the SON data block headers for a
<     channel.
<     'fhead' is a FileHeader instance, and 'chan_info' is a
<     ChannelInfo instance.
---
>     Returns a matrix containing the Son data block headers for a channel.
>     'fhead' is a FileHeader instance, and 'chanInfo' is a ChannelInfo instance.
43,47c12,16
<     Offset to start of block in file
<     Start time in clock ticks
<     End time in clock ticks
<     Chan number
<     Items
---
>          Offset to start of block in file
>          Start time in clock ticks
>          End time in clock ticks
>          Chan number
>          Items
50,52c19,21
<     if chan_info.firstblock == -1:
<         raise ValueError('No data on channel ' + str(chan_info.chan))
<     succ_block = 1
---
>     if chanInfo.firstblock == -1:
>         raise ValueError, 'No data on channel %i' % chanInfo.chan
>     succBlock = 1
54c23
<     header = zeros([6, chan_info.blocks], int)
---
>     header = zeros([6, chanInfo.blocks], int)
56c25,34
<     fhead.fid.seek(chan_info.firstblock)
---
>     fhead.fid.seek(chanInfo.firstblock)
>     ####################################MAX
> 
>     # Last and next block pointers, start and end times in clock ticks
>     header[0:4, 0] = numpy.fromfile(fhead.fid, numpy.int32, count=4)
>     # Channel number and number of items in block:
>     header[4:6, 0] = numpy.fromfile(fhead.fid, numpy.int16, count=2)
> 
>     ####################################MAX
>     """
58a37,38
>     print("header[0:4, 0]")
>     print(header[0:4, 0])
60a41,45
>     """
>     ####################################MAX
>     ####################################MAX
>     print "header[succBlock, 0]", header[succBlock, 0]
>     ####################################MAX
62,63c47
<     if header[succ_block, 0] == -1:
<         header[0, 0] = int(chan_info.firstblock)
---
>     if header[succBlock, 0] == -1: header[0, 0] = int(chanInfo.firstblock)
66,67c50,58
<         fhead.fid.seek(header[succ_block, 0])
<         for i in arange(1, chan_info.blocks):
---
>         fhead.fid.seek(header[succBlock, 0])
>         for i in arange(1, chanInfo.blocks):
>             ####################################MAX
> 
>             header[0:4, i] = numpy.fromfile(fhead.fid, numpy.int32, count=4)
>             header[4:6, i] = numpy.fromfile(fhead.fid, numpy.int16, count=2)
> 
>             ####################################MAX
>             """
70,71c61,64
<             if header[succ_block, i] > 0:
<                 fhead.fid.seek(header[succ_block, i])
---
>             """
>             ####################################MAX
>             if header[succBlock, i] > 0:
>                 fhead.fid.seek(header[succBlock, i])
73c66
<         # Replace pred_block for previous column:
---
>         # Replace predBlock for previous column:
75,76c68,69
<     # Delete succ_block data:
<     header = take(header, (0,2,3,4,5), axis=0)
---
>     # Delete succBlock data:
>     header = take(header, (0,2,3,4,5),axis=0)
81c74
<     Reads the file header for a SON file.
---
>     Reads the file header for a Son file.
89c82,107
<         self.system_id   = io.fread(self.fid, 1, 'h')
---
>         ####################################MAX
> 
>         self.systemID   = numpy.fromfile(self.fid, numpy.int16, count=1)
>         self.copyright  = self.fid.read(10)
>         self.creator    = self.fid.read(8)
>         self.usPerTime  = numpy.fromfile(self.fid, numpy.int16, count=1)
>         self.timePerADC = numpy.fromfile(self.fid, numpy.int16, count=1)
>         self.filestate  = numpy.fromfile(self.fid, numpy.int16, count=1)
>         self.firstdata  = numpy.fromfile(self.fid, numpy.int32, count=1)
>         self.channels   = numpy.fromfile(self.fid, numpy.int16, count=1)
>         ####################################MAX
>         # print "self.channels", self.channels
>         ####################################MAX
>         self.chansize   = numpy.fromfile(self.fid, numpy.int16, count=1)
>         self.extraData  = numpy.fromfile(self.fid, numpy.int16, count=1)
>         self.buffersize = numpy.fromfile(self.fid, numpy.int16, count=1)
>         self.osFormat   = numpy.fromfile(self.fid, numpy.int16, count=1)
>         self.maxFTime   = numpy.fromfile(self.fid, numpy.int32, count=1)
>         self.dTimeBase  = numpy.fromfile(self.fid, numpy.float64, count=1)
>         if self.systemID < 6: self.dTimeBase = 1e-6
>         self.timeDate = {
>                 'Detail' : numpy.fromfile(self.fid, numpy.int8, count=6),
>                 'Year' :   numpy.fromfile(self.fid, numpy.int16, count=1)}
>         ####################################MAX
>         """
>         self.systemID   = io.fread(self.fid, 1, 'h')
92,93c110,111
<         self.us_per_time  = io.fread(self.fid, 1, 'h')
<         self.time_per_adc = io.fread(self.fid, 1, 'h')
---
>         self.usPerTime  = io.fread(self.fid, 1, 'h')
>         self.timePerADC = io.fread(self.fid, 1, 'h')
95c113
<         self.first_data  = io.fread(self.fid, 1, 'l')
---
>         self.firstdata  = io.fread(self.fid, 1, 'l')
97,98c115,116
<         self.chan_size   = io.fread(self.fid, 1, 'h')
<         self.extra_data  = io.fread(self.fid, 1, 'h')
---
>         self.chansize   = io.fread(self.fid, 1, 'h')
>         self.extraData  = io.fread(self.fid, 1, 'h')
100,109c118,135
<         self.os_format   = io.fread(self.fid, 1, 'h')
<         self.max_ftime   = io.fread(self.fid, 1, 'l')
<         self.dtime_base  = io.fread(self.fid, 1, 'd')
<         if self.system_id < 6: self.dtime_base = 1e-6
<         self.time_date = {
<                         'Detail' : io.fread(self.fid, 6, 'B'),
<                         'Year' :   io.fread(self.fid, 1, 'h')}
<         if self.system_id < 6:
<             self.time_date['Detail'] = zeros(6)
<             self.time_date['Year'] = 0
---
>         self.osFormat   = io.fread(self.fid, 1, 'h')
>         self.maxFTime   = io.fread(self.fid, 1, 'l')
>         self.dTimeBase  = io.fread(self.fid, 1, 'd')
>         print("self.dTimeBase")
>         print(self.dTimeBase)
> 
>         if self.systemID < 6: self.dTimeBase = 1e-6
>         self.timeDate = {
> 		        'Detail' : io.fread(self.fid, 6, 'B'),
> 		        'Year' :   io.fread(self.fid, 1, 'h')}
>         print("self.timeDate")
>         print(self.timeDate)
>         """
> 
>         ####################################MAX
>         if self.systemID < 6:
>             self.timeDate['Detail'] = zeros(6)
>             self.timeDate['Year'] = 0
111c137
<         self.file_comment = {}
---
>         self.fileComment = {}
113a140,145
>             ####################################MAX
> 
>             bytes = numpy.fromfile(self.fid, numpy.int8, count=1)
> 
>             ####################################MAX
>             """		
115c147,149
<             self.file_comment[i] = self.fid.read(bytes)
---
>             """
>             ####################################MAX
>             self.fileComment[i] = self.fid.read(bytes)
118c152
< 
---
> 	
121a156,159
>     def getSamplingRateInfo(self, IDChannel):
>         info = _ChannelInfo(self, IDChannel)
>         return info.idealRate
> 
124c162
<         Prints a table with details of active channels in a SON file.
---
>         Prints a table with details of active channels in a Son file.
132,134c170,171
<                 print '%-5i %-10s %-10s %s' % (
<                         chan, info.type(), info.title,
<                         info.comment)
---
>                 print '%-5i %-10s %-10s %s'	%(
>                         chan, info.type(), info.title, info.comment)
136c173,185
< 
---
> 	
>     def return_chan_list(self):
>         '''
>         Returns a list with details of active channels in a Son file.
>         '''
>         channels = []
>         for chan in range(1, self.channels+1):
>             info = _ChannelInfo(self, chan)
>             if info.kind > 0:
>                 channels.append(chan)
> 			
>         return channels
> 		
142,144c191,193
<             'ticks': returns the time in base clock ticks.
<             'microseconds', 'milliseconds' or 'seconds': scales the
<             output to the appropriate unit.
---
>                 'ticks': returns the time in base clock ticks.
>                 'microseconds', 'milliseconds' or 'seconds': scales the
>                 output to the appropriate unit.
149c198
<             timestamp = timestamp * (self.us_per_time * self.dtime_base * 1e6)
---
>             timestamp = timestamp * (self.usPerTime * self.dTimeBase * 1e6)
151c200
<             timestamp = timestamp * (self.us_per_time * self.dtime_base * 1e3)
---
>             timestamp = timestamp * (self.usPerTime * self.dTimeBase * 1e3)
153c202
<             timestamp = timestamp * (self.us_per_time * self.dtime_base)
---
>             timestamp = timestamp * (self.usPerTime * self.dTimeBase)
158c207
<         return 'File header from SON file %s' % self.name
---
>         return 'File header from Son file %s' % self.name
162c211
<     Reads the SON file channel header for a channel.
---
>     Reads the Son file channel header for a channel.
165,166c214,215
<         'fhead' is an instance containing the file header, and
<         'channel' is the channel number.
---
> 	    'fhead' is an instance containing the file header, and
> 	    'channel' is the channel number.
177,189c226,246
<         self.del_size       = io.fread(fhead.fid, 1, 'h')
<         self.next_del_block = io.fread(fhead.fid, 1, 'l')
<         self.firstblock     = io.fread(fhead.fid, 1, 'l')
<         self.lastblock      = io.fread(fhead.fid, 1, 'l')
<         self.blocks         = io.fread(fhead.fid, 1, 'h')
<         self.n_extra        = io.fread(fhead.fid, 1, 'h')
<         self.pre_trig       = io.fread(fhead.fid, 1, 'h')
<         self.free0          = io.fread(fhead.fid, 1, 'h')
<         self.py_sz          = io.fread(fhead.fid, 1, 'h')
<         self.max_data       = io.fread(fhead.fid, 1, 'h')
<         bytes               = io.fread(fhead.fid, 1, 'B')
<         pointer             = fhead.fid.tell()
<         self.comment        = fhead.fid.read(bytes)
---
> 
>         ####################################MAX      
>         self.delSize      = numpy.fromfile(fhead.fid, numpy.int16, count=1)
>         self.nextDelBlock = numpy.fromfile(fhead.fid, numpy.int32, count=1)
>         self.firstblock   = numpy.fromfile(fhead.fid, numpy.int32, count=1)
>         ####################################MAX
>         # print "self.firstblock", self.firstblock
>         ####################################MAX
>         self.lastblock    = numpy.fromfile(fhead.fid, numpy.int32, count=1)
>         self.blocks       = numpy.fromfile(fhead.fid, numpy.int16, count=1)
>         ####################################MAX
>         # print "self.blocks", self.blocks
>         ####################################MAX
>         self.nExtra       = numpy.fromfile(fhead.fid, numpy.int16, count=1)
>         self.preTrig      = numpy.fromfile(fhead.fid, numpy.int16, count=1)
>         self.free0        = numpy.fromfile(fhead.fid, numpy.int16, count=1)
>         self.phySz        = numpy.fromfile(fhead.fid, numpy.int16, count=1)
>         self.maxData      = numpy.fromfile(fhead.fid, numpy.int16, count=1)
>         bytes             = numpy.fromfile(fhead.fid, numpy.int8, count=1)
>         pointer           = fhead.fid.tell()
>         self.comment      = fhead.fid.read(bytes)
191,196c248,253
<         self.max_chan_time  = io.fread(fhead.fid, 1, 'l')
<         self.l_chan_dvd     = io.fread(fhead.fid, 1, 'l')
<         self.phy_chan       = io.fread(fhead.fid, 1, 'h')
<         bytes               = io.fread(fhead.fid, 1, 'B')
<         pointer             = fhead.fid.tell()
<         self.title          = fhead.fid.read(bytes)
---
>         self.maxChanTime  = numpy.fromfile(fhead.fid, numpy.int32, count=1)
>         self.lChanDvd     = numpy.fromfile(fhead.fid, numpy.int32, count=1)
>         self.phyChan      = numpy.fromfile(fhead.fid, numpy.int16, count=1)
>         bytes             = numpy.fromfile(fhead.fid, numpy.int8, count=1)
>         pointer           = fhead.fid.tell()
>         self.title        = fhead.fid.read(bytes)
198,200c255,335
<         self.ideal_rate     = io.fread(fhead.fid, 1, 'f')
<         self.kind           = io.fread(fhead.fid, 1, 'B')
<         pad                 = io.fread(fhead.fid, 1, 'b')
---
>         self.idealRate    = numpy.fromfile(fhead.fid, numpy.float32, count=1)
>         ####################################MAX
>         self.kind         = numpy.fromfile(fhead.fid, numpy.uint8, count=1)
>         ####################################MAX
>         #self.kind         = numpy.fromfile(fhead.fid, numpy.int8, count=1)
>         ####################################MAX
>         pad               = numpy.fromfile(fhead.fid, numpy.bool_, count=1)
> 
>         if self.kind in [1, 6]:
>             self.scale    = numpy.fromfile(fhead.fid, numpy.float32, count=1)
>             self.offset   = numpy.fromfile(fhead.fid, numpy.float32, count=1)
>             bytes         = numpy.fromfile(fhead.fid, numpy.int8, count=1)
>             pointer       = fhead.fid.tell()
>             self.units    = fhead.fid.read(bytes)
>             fhead.fid.seek(pointer+5)
>             if fhead.systemID < 6: 
>                 ####################################MAX
>                 self.divide = numpy.fromfile(fhead.fid, numpy.int16, count=1)
>                 self.dt = self.divide*fhead.usPerTime*fhead.timePerADC*1e-6
>                 ####################################MAX
>                 #self.divide = numpy.fromfile(fhead.fid, numpy.int32, count=1)
>                 ####################################MAX
>             else: 
>                 ####################################MAX
>                 self.interleave = numpy.fromfile(fhead.fid, numpy.int16, count=1)
>                 self.dt = self.lChanDvd*fhead.usPerTime*fhead.dTimeBase
>                 ####################################MAX
>                 #self.interleave = numpy.fromfile(fhead.fid, numpy.int32, count=1)
>                 ####################################MAX
>         elif self.kind in [7, 9]:
>             self.min       = numpy.fromfile(fhead.fid, numpy.float32, count=1)
>             self.max       = numpy.fromfile(fhead.fid, numpy.float32, count=1)
>             bytes          = numpy.fromfile(fhead.fid, numpy.int8, count=1)
>             pointer        = fhead.fid.tell()
>             self.units     = fhead.fid.read(bytes)
>             fhead.fid.seek(pointer+5)
>             if fhead.systemID < 6: 
>                 ####################################MAX
>                 self.divide = numpy.fromfile(fhead.fid, numpy.int16, count=1)
>                 self.dt = self.divide*fhead.usPerTime*fhead.timePerADC*1e-6
>                 ####################################MAX
>                 #self.divide = numpy.fromfile(fhead.fid, numpy.int32, count=1)
>                 ####################################MAX
>             else: 
>                 ####################################MAX
>                 self.interleave = numpy.fromfile(fhead.fid, numpy.int16, count=1)
>                 self.dt = self.lChanDvd*fhead.usPerTime*fhead.dTimeBase
>                 ####################################MAX
>                 #self.interleave = numpy.fromfile(fhead.fid, numpy.int32, count=1)
>                 ####################################MAX
> 
>         elif self.kind in [4]:
>             self.initLow   = numpy.fromfile(fhead.fid, numpy.int8, count=1)
>             self.nextLow   = numpy.fromfile(fhead.fid, numpy.int8, count=1)
> 		
>         ##################################
>         """
>         self.delSize      = io.fread(fhead.fid, 1, 'h')
>         self.nextDelBlock = io.fread(fhead.fid, 1, 'l')
>         self.firstblock   = io.fread(fhead.fid, 1, 'l')
>         self.lastblock    = io.fread(fhead.fid, 1, 'l')
>         self.blocks       = io.fread(fhead.fid, 1, 'h')
>         self.nExtra       = io.fread(fhead.fid, 1, 'h')
>         self.preTrig      = io.fread(fhead.fid, 1, 'h')
>         self.free0        = io.fread(fhead.fid, 1, 'h')
>         self.phySz        = io.fread(fhead.fid, 1, 'h')
>         self.maxData      = io.fread(fhead.fid, 1, 'h')
>         bytes             = io.fread(fhead.fid, 1, 'B')
>         pointer           = fhead.fid.tell()
>         self.comment      = fhead.fid.read(bytes)
>         fhead.fid.seek(pointer+71)
>         self.maxChanTime  = io.fread(fhead.fid, 1, 'l')
>         self.lChanDvd     = io.fread(fhead.fid, 1, 'l')
>         self.phyChan      = io.fread(fhead.fid, 1, 'h')
>         bytes             = io.fread(fhead.fid, 1, 'B')
>         pointer           = fhead.fid.tell()
>         self.title        = fhead.fid.read(bytes)
>         fhead.fid.seek(pointer+9)
>         self.idealRate    = io.fread(fhead.fid, 1, 'f')
>         self.kind         = io.fread(fhead.fid, 1, 'B')
>         pad               = io.fread(fhead.fid, 1, 'b')
207c342
<             self.units    = fhead.fid.read(bytes).strip()
---
>             self.units    = fhead.fid.read(bytes)
209c344
<             if fhead.system_id < 6: self.divide = io.fread(fhead.fid, 1, 'l')
---
>             if fhead.systemID < 6: self.divide = io.fread(fhead.fid, 1, 'l')
216c351
<             self.units     = fhead.fid.read(bytes).strip()
---
>             self.units     = fhead.fid.read(bytes)
218c353
<             if fhead.system_id < 6: self.divide = io.fread(fhead.fid, 1, 'l')
---
>             if fhead.systemID < 6: self.divide = io.fread(fhead.fid, 1, 'l')
221,222c356,363
<             self.init_low   = io.fread(fhead.fid, 1, 'B')
<             self.next_low   = io.fread(fhead.fid, 1, 'B')
---
>             self.initLow   = io.fread(fhead.fid, 1, 'B')
>             self.nextLow   = io.fread(fhead.fid, 1, 'B')
>         """	
>         ##################################
>         try:
>             self.units        = self.units.strip()
>         except AttributeError:
>             pass
248a390,391
> 	
> 	
253c396
<     SON file.
---
>     Son file.
255c398
<     >>> chan = Channel(chan_number, filename)
---
>     >>> chan = Channel(chanNumber, filename)
271c414
<     def data(self, start=None, stop=None, timeunits='seconds', as_float=True):
---
>     def data(self, startTime=-1, stopTime=-1, timeunits='seconds', as_float=True):
273c416
<         Returns channel data from a SON file.
---
>         Returns channel data from a Son file.
287a431,433
>         startBlock, stopBlock =self._time_to_blocks(startTime, stopTime)
>         #		print("startTime = ", startTime, "stopTime = ", stopTime)
>         #		print("startBlock = ", startBlock, "stopBlock = ", stopBlock)
290c436
<             return data(self, start, stop, timeunits, as_float)
---
>             return data(self, startBlock, stopBlock, timeunits, as_float)
293c439
<             return data(self, start, stop, timeunits)
---
>             return data(self, startBlock, stopBlock, timeunits)
310a457,481
> 	
>     def _time_to_blocks(self,startTime, stopTime):
>         ####################################MAX
>         startBlock = -1
>         stopBlock = -1
>         ####################################MAX
>         if startTime != -1:
>             startTics = int((float(startTime)/(self.fhead.usPerTime*self.fhead.timePerADC))/self.fhead.dTimeBase)
>             #print startTics
>             startBlock = numpy.searchsorted(self.blockheader[1,:],startTics)
>             #print start
>             if startBlock == self.blockheader.shape[1]:
>                 print 'start time exceeds file length... aborting'
>                 return 0
>         if startBlock == 0:
>             startBlock =1
>         if stopTime != -1:
>             stopTics = int((float(stopTime)/(self.fhead.usPerTime*self.fhead.timePerADC))/self.fhead.dTimeBase)
>             #print stopTics
>             stopBlock = numpy.searchsorted(self.blockheader[2,:],stopTics)+1
>             #print stop
>             if stopBlock == self.blockheader.shape[1]:
>                 print 'stop time exceeds file length... aborting'
>                 return 0
>         return startBlock,stopBlock
314c485
<     Creates an instance whose attributes are those of a SON file.
---
>     Creates an instance whose attributes are those of a Son file.
317,321c488,491
<     >>> f = File(filename) # then:
<     >>> f.chanlist() # will print a list of available channels, and
<     >>> f.getchannel(chan_number)
<     # will create a channel instance named after the
<     # channel number provided (see class Channel).
---
>     >>> f = File(filename)       # then:
>     >>> f.chanlist()             # will print a list of available channels, and
>     >>> f.getchannel(chanNumber) # will create a channel instance named after the
> 	                             # channel number provided (see class Channel).
324a495
>         self.header = FileHeader(self.name)
327c498
<         return  'SON file %s' % self.name
---
>         return  'Son file %s' % self.name
331c502
<         Set an attribute of current SON file to the channel provided.
---
>         Set an attribute of current Son file to the channel provided.
333a505
>         #		print(attr)
338c510
<         Prints a table with details of active channels in a SON file.
---
>         Prints a table with details of active channels in a Son file.
340c512,527
<         FileHeader(self.name).chan_list()
---
>         self.header.chan_list()
> 
>     def getSamplingRateInfo(self, IDChannel):
>         return self.header.usPerTime*1000000
> 
>     def getNbChannelsInfo(self):
>         nbChannels =0
>         for chan in range(1, self.header.channels+1):
>             info = _ChannelInfo(self.header, chan)
>             if info.kind > 0:
>                 nbChannels = nbChannels+1
>         return nbChannels
> 
> 
> 
> 
